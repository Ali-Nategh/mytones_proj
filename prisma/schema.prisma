generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////

model User {
  id                String     @id @unique @default(uuid())
  username          String
  name              String
  lastname          String
  password          String
  age               Int?
  role              Role       @default(BASIC)
  created_at        DateTime   @default(now())
  updated_at        DateTime?  @default(now()) @updatedAt
  deleted_at        DateTime?
  personalPlaylists Playlist[]

  @@index([id])
}

model Email {
  id         String   @id @unique @default(uuid())
  user_id    String   @unique
  email      String   @unique
  updated_at DateTime @default(now()) @updatedAt
  verified   Boolean  @default(false)

  @@index([user_id])
  @@index([email])
}

////////////////////////////////////////////////////////////////////////

model Song {
  id             String   @id @unique @default(uuid())
  song_name      String
  file_path      String   @unique
  artist_id      String
  duration       String
  album_id       String?
  publisher      String?
  ISRC           String?  @unique
  copyright_info String?
  release_date   String?
  genres         Genres[] @default([])
  producers      String[] @default([])
  writers        String[] @default([])
  engineers      String[] @default([])
  plays          BigInt   @default(0)

  @@index([id])
  @@index([song_name])
}

model Artist {
  id   String @id @unique @default(uuid())
  name String

  @@index([id])
  @@index([name])
}

model Album {
  id              String   @id @unique @default(uuid())
  name            String
  artist_id       String
  feat_artists_id String[]
  release_date    String
  songs_id        String[] //  ---------------
  genres          Genres[] @default([])

  @@index([id])
  @@index([name])
}

model Playlist {
  id       String   @unique @default(uuid())
  name     String
  User     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String   @unique
  songs_id String[] @default([]) //  ---------------

  @@id([id, user_id])
  @@index([id])
}

model Grouping {
  id         Int    @id @unique @default(autoincrement())
  group_type Groups // Playlist or Album
  group_id   String // Playlist or Album
  creator_id String // User     or Artist
  song_id    String @unique
}

model Genre {
  id Genres @id @unique

  @@index([id])
}

model Favorites {
  id         String   @unique @default(uuid()) // -------------
  user_id    String
  type       Type
  songs_id   String[] @default([])
  artists_id String[] @default([])
  albums_id  String[] @default([])

  @@id([user_id, type])
  @@index([user_id])
}

model Actions {
  id          Int    @id @unique @default(autoincrement())
  user_id     String
  target_id   String
  action_type Action

  @@index([user_id])
  @@index([target_id])
}

////////////////////////////////////////////////////////////////////////

enum Role {
  BASIC
  EDITOR
  ADMIN
}

enum Type {
  SONGS // ----------------------------------------------
  ARTISTS
  ALBUMS
  DOWNLOADS
}

enum Action {
  LIKE
  PLAY
  SONGS
  ARTISTS
  ALBUMS
  DOWNLOADS
}

enum Groups {
  PLAYLIST
  ALBUM
}

enum Genres {
  POP
  COUNTRY
  ELECTRONIC
  BLUES
  ROCK
  HIPHOP
  JAZZ
  METAL
  INDIE
  DANCE
  SOUL
  LATIN
  KPOP
  DUBSTEP
  TECHNO
  FOLK
  INSTRUMENTAL
  EMO
  GOSPEL
  HOUSE
  RnB
  PSYCHEDELIC
  RAP
  DISCO
  PUNK
  COVER
  CLASSICAL
}
